Exploratory Data Analysis
========================================================
author: Jing Xu (Applied Bioinformatics (B330), DKFZ)
date: 2019-03-08
autosize: true
width: 1440
height: 900

```{r setup, include=FALSE, message=FALSE, warning=FALSE}
library(plyr)
library(dplyr)
library(corrplot)
```

Outline
========================================================
- Inspecting your data
- Learn to use **dplyr** package
- Descriptive statistics
- Basic plotting functions


Inspect your data 
========================================================
**It's extremely important to work with clean data!** Excel sheets always use free text boxes which may contain lots of garbage, you cannot even read the mess into R! Sometimes you can get data into R, but 

- Does it follow "one column one data type" rules? 
- In each column, do call the formats look alike? Can they be separate by regular expression?
- In each column, are all the values in correct format as required? (e.g. character format, date format, number range ...) Identify the wrong ones and try to fix them.
- Convert missing values to NA


Some examples of bad data...
========================================================
1. A column named "cell number"...
```{r, echo=FALSE}
cellnumber = c(1970000, 1.18E07, "9.23E04 cells")
cellnumber 
as.numeric(cellnumber)
```

```{r, message=FALSE, warnings=FALSE}
# which value is not a number?
suppressWarnings(
    cellnumber[which(is.na(as.numeric(cellnumber)))]
    )
# which values are numbers?
suppressWarnings(
    cellnumber[which(!is.na(as.numeric(cellnumber)))]
    )
```


=======================================================
How to fix this with R?
```{r}
cellnumber[which(is.na(as.numeric(cellnumber)))] <- "9.23E04"
cellnumber <- as.numeric(cellnumber)
cellnumber
```

But what if there are many values like this?
```{r message=FALSE, eval=FALSE}
ind <- which(is.na(as.numeric(cellnumber)))

# method 1. string split
as.numeric(unlist(strsplit(as.character(cellnumber[ind]), " "))[1])

# method 2. string split by sapply
as.numeric(sapply(strsplit(as.character(cellnumber[ind]), " "), "[[", 1))

```
Pandoc bug... cannot display the results correctly, you can try to run it in R console.


Explore Iris dataset (demo)
========================================================
As you already know this dataset contains the length and the width of the sepals and petals of 3 Iris species, and there are 50 samples per species, but how do you know?
```{r}
names(iris)
table(iris$Species)
```


Get to know 'dplyr' for data frames
========================================================
* Selecting columns with long variables names or subset data based on multiple columns can produce lengthy code, which is very difficult to read. The 'dplyr' package provides a handful of useful functions for easy data frame manipulation:

    - `filter()` to select cases based on their values.
    - `arrange()` to reorder the cases.
    - `select()` and `rename()` to select variables based on their names.
    - `mutate()` and `transmute()` to add new variables that are functions of existing variables.
    - `summarise()` to condense multiple values to a single value.
    - `group_by()`to group data based on variable(s)

* You can pipe your code by `%>%`


Select and filter 
========================================================
```{r}
names(iris)
iris[iris$Sepal.Width>4,c("Species", "Sepal.Width", "Sepal.Length")]
```

```{r}
# dplyr package is loaded in setup chunk
iris %>% select(Species, Sepal.Width, Sepal.Length) %>% filter(Sepal.Width>4)
```


Mutate and arrange
========================================================
```{r}
Data <- iris %>% 
        mutate(height= sample(seq(30.0, 50.0, by=0.2), nrow(iris), replace = T )) %>%
        filter(height > 40) %>%        
        dplyr::select(Species, Sepal.Length, Sepal.Width, height) %>% 
        arrange(height)

head(Data) 
```



Data distribution
========================================================
Overview of total distribution by `summary()`
```{r, echo=FALSE}
summary(iris)
```


========================================================
```{r fig.height= 8,fig.width=14, fig.align="center"}
par(mfrow =c(1,2))
graphics::boxplot(iris[,names(iris) != "Species"], main="Boxplot", xlab="measurement", ylab="values")
graphics::boxplot(iris[,names(iris) != "Species"], 
        main="Boxplot", xlab="measurement", ylab="values",
        col=c("red", "blue", "green", "yellow") )

```



Calculation based on a variable
========================================================
* Use `tapply(vector, index, function)`
```{r }
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Width, iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris$Sepal.Width, iris$Species, mean)

```

========================================================
* Use `group_by` and `summarise_at` from `dplyr` package
```{r}
iris %>% 
    group_by(Species) %>%
    summarise(mean=mean(Sepal.Length))

```


========================================================
```{r fig.height= 8,fig.width=14, fig.align="center"}
par(mfrow =c(1,2))
graphics::boxplot(iris$Sepal.Width ~ as.factor(iris$Species), 
                  col=c("red", "blue", "green")) 
graphics::boxplot(iris$Sepal.Length ~ as.factor(iris$Species), 
                  col=c("red", "blue", "green")) 
```


Correlation
========================================================
Is there any correlation between these variables?
It's a good idea to plot your data first!
```{r, fig.height= 8,fig.width=8, fig.align="center"}
pairs(iris[1:4])
```

========================================================
```{r, fig.height= 8,fig.width=8, fig.align="center"}
pairs(iris[1:4], main="pair-wise correlation in Iris Data", pch=21, bg=c("red", "green3", "blue")[unclass(iris$Species)])
```


Test correlations
========================================================
```{r}
cor.test(iris$Petal.Length, iris$Sepal.Width, method="spearman")
cor.test(iris$Petal.Length, iris$Sepal.Length, method = "spearman")
```

========================================================
You may also check paired correlation for all variables
```{r}
M <- suppressMessages(stats::cor(iris[1:4]));
M
```

========================================================
Use `corrplot` package for visulization
```{r, fig.height= 12,fig.width=12, fig.align="center"}
par(mfrow =c(1,2))
corrplot(M)
corrplot(M, method = "number")

```


========================================================
# $\color{red}{\text{Congrats! You finish this session!}}$